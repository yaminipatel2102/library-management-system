#include <bits/stdc++.h>
using namespace std;

// Structure to represent a book
struct Book {
    int ISBNNumber, PublicationYear;
    string BookName, Author;
    double Price;
};

// Structure to represent a node in the binary search tree (BST)
struct Node {
    Book book;      // Book data stored in the node
    Node* Left;     // Pointer to the left child node
    Node* Right;    // Pointer to the right child node
};

// Function to create a new node with given book details
Node* CreateNode(int ISBNNumber, int PublicationYear, string BookName, string Author, double Price) {
    Node* NewNode = new Node();  // Allocate memory for a new node
    NewNode->book.ISBNNumber = ISBNNumber;
    NewNode->book.PublicationYear = PublicationYear;
    NewNode->book.BookName = BookName;
    NewNode->book.Author = Author;
    NewNode->book.Price = Price;
    NewNode->Left = nullptr;  // No left child yet
    NewNode->Right = nullptr; // No right child yet
    return NewNode;  // Return the created node
}

// Function to add a book to the binary search tree (BST)
Node* AddBook(Node* root, int ISBNNumber, int PublicationYear, string BookName, string Author, double Price) {
    if (root == nullptr) {  // If the tree is empty, create a new node
        cout << "Book added successfully with ISBN: " << ISBNNumber << endl;
        return CreateNode(ISBNNumber, PublicationYear, BookName, Author, Price);
    }

    // If ISBNNumber is smaller, insert the book in the left subtree
    if (root->book.ISBNNumber > ISBNNumber) {
        root->Left = AddBook(root->Left, ISBNNumber, PublicationYear, BookName, Author, Price);
    } 
    // If ISBNNumber is greater, insert the book in the right subtree
    else if (root->book.ISBNNumber < ISBNNumber) {
        root->Right = AddBook(root->Right, ISBNNumber, PublicationYear, BookName, Author, Price);
    } 
    // If the book already exists, notify the user
    else {
        cout << "Book with ISBN " << ISBNNumber << " is already present in the system.\n";
        return root;
    }

    return root;  // Return the root node after insertion
}

// Function to search a book by ISBNNumber in the binary search tree (BST)
Node* SearchBook(Node* root, int ISBNNumber) {
    if (root == nullptr) return nullptr;  // Book not found
    if (root->book.ISBNNumber == ISBNNumber) return root;  // Book found
    else if (root->book.ISBNNumber > ISBNNumber) return SearchBook(root->Left, ISBNNumber);  // Search in left subtree
    else return SearchBook(root->Right, ISBNNumber);  // Search in right subtree
}

// Function to display details of a book
void DisplayBook(Book book) {
    cout << "ISBN: " << book.ISBNNumber << endl;
    cout << "BookName: " << book.BookName << endl;
    cout << "Author: " << book.Author << endl;
    cout << "Publication Year: " << book.PublicationYear << endl;
    cout << "Price: " << book.Price << endl;
    cout << "-----------------------------------" << endl;
}

// Function to find the node with the minimum ISBNNumber in a subtree (used for deletion)
Node* FindMin(Node* node) {
    if (node->Left == nullptr) return node;  // Minimum value is the leftmost node
    return FindMin(node->Left);
}

// Function to delete a book by ISBNNumber from the binary search tree (BST)
Node* DeleteBook(Node* root, int ISBNNumber) {
    if (root == nullptr) return nullptr;  // Book not found
    if (root->book.ISBNNumber > ISBNNumber) root->Left = DeleteBook(root->Left, ISBNNumber);  // Search in left subtree
    else if (root->book.ISBNNumber < ISBNNumber) root->Right = DeleteBook(root->Right, ISBNNumber);  // Search in right subtree
    else {
        // Case 1: Node has no children (leaf node)
        if (root->Left == nullptr && root->Right == nullptr) {
            delete root;  // Delete the node
            return nullptr;
        }
        // Case 2: Node has only one child (left or right)
        else if (root->Right == nullptr) {
            Node* Temp = root->Left;  // Take the left child
            delete root;  // Delete the node
            return Temp;  // Return the left child
        }
        else if (root->Left == nullptr) {
            Node* Temp = root->Right;  // Take the right child
            delete root;  // Delete the node
            return Temp;  // Return the right child
        }
        // Case 3: Node has two children
        else {
            Node* Temp = FindMin(root->Right);  // Find the minimum node in the right subtree
            root->book = Temp->book;  // Replace the current node with the minimum node
            root->Right = DeleteBook(root->Right, Temp->book.ISBNNumber);  // Delete the minimum node from the right subtree
        }
    }
    return root;  // Return the root node after deletion
}

// In-order traversal of the tree to print all book details
void inorderTraversal(Node* root) {
    if (root == nullptr) return;  // Base case: empty node
    inorderTraversal(root->Left);  // Traverse the left subtree
    // Print the book details
    cout << setw(10) << root->book.ISBNNumber
         << setw(20) << root->book.PublicationYear
         << setw(30) << root->book.BookName
         << setw(20) << root->book.Author
         << setw(10) << fixed << setprecision(2) << root->book.Price << endl;    
    inorderTraversal(root->Right);  // Traverse the right subtree
}

// Function to print all books in a tabular format
void PrintBooksInTable(Node* root) {
    if (root == nullptr) {
        cout << "No books available in the Library.\n";  // No books in the system
        return;
    }
    cout << setw(10) << "ISBN"
         << setw(20) << "Publication Year"
         << setw(30) << "Book Name"
         << setw(20) << "Author"
         << setw(10) << "Price" << endl;
    cout << "------------------------------------------------------------------------------------------\n";

    inorderTraversal(root);  // Print books using in-order traversal
}

// Function to filter books based on user criteria
void filteredInorderTraversal(Node* root, int choice, const string& BookName, const string& Author, 
                              double MinPrice, double MaxPrice, int MinYear, int MaxYear, bool &foundMatch) {
    if (root == nullptr) return;

    filteredInorderTraversal(root->Left, choice, BookName, Author, MinPrice, MaxPrice, MinYear, MaxYear, foundMatch);  // Traverse left subtree

    // Check if the current book matches the filter condition
    bool match = false;
    switch (choice) {
        case 1: // Filter by Book Name
            if (root->book.BookName == BookName) match = true;
            break;
        case 2: // Filter by Author
            if (root->book.Author == Author) match = true;
            break;
        case 3: // Filter by Price Range
            if (root->book.Price >= MinPrice && root->book.Price <= MaxPrice) match = true;
            break;
        case 4: // Filter by Publication Year Range
            if (root->book.PublicationYear >= MinYear && root->book.PublicationYear <= MaxYear) match = true;
            break;
    }

    // If the book matches the filter, print its details
    if (match) {
        if (!foundMatch) {  // Only print header once if this is the first match
            cout << setw(10) << "ISBN"
                 << setw(20) << "Publication Year"
                 << setw(30) << "Book Name"
                 << setw(20) << "Author"
                 << setw(10) << "Price" << endl;
            cout << "------------------------------------------------------------------------------------------\n";
        }
        foundMatch = true; // Set the flag to true to indicate at least one match
        cout << setw(10) << root->book.ISBNNumber
             << setw(20) << root->book.PublicationYear
             << setw(30) << root->book.BookName
             << setw(20) << root->book.Author
             << setw(10) << fixed << setprecision(2) << root->book.Price << endl;
    }

    filteredInorderTraversal(root->Right, choice, BookName, Author, MinPrice, MaxPrice, MinYear, MaxYear, foundMatch);  // Traverse right subtree
}

// Function to filter books based on user input
void FilterBooks(Node* root) {

    if (root == nullptr) {
        cout << "No books available in the Library.\n";  // No books to filter
        return;
    }

    string BookName, Author;
    int MinYear, MaxYear;
    double MinPrice, MaxPrice;
    int choice;
    bool foundMatch = false;
    bool valid = false;
    cout << "Filter by:\n";
    cout << "1. Book Name\n";
    cout << "2. Author\n";
    cout << "3. Price Range\n";
    cout << "4. Publication Year Range\n";
    cout << "Enter your choice: ";
    cin >> choice;
    cin.ignore(); // Consume the newline character

    // Loop until valid input is received
    while(!valid){
        switch (choice) {
            case 1:
                cout << "Enter Book Name: ";
                getline(cin, BookName);
                valid = true;
                break;
            case 2:
                cout << "Enter Author Name: ";
                getline(cin, Author);
                valid = true;
                break;
            case 3:
                cout << "Enter Min Price: ";
                cin >> MinPrice;
                cout << "Enter Max Price: ";
                cin >> MaxPrice;
                valid = true;
                break;
            case 4:
                cout << "Enter Min Publication Year: ";
                cin >> MinYear;
                cout << "Enter Max Publication Year: ";
                cin >> MaxYear;
                valid = true;
                break;
            default:
                cout << "Enter Appropriate Filter Choice : ";
                cin >> choice;
                cin.ignore();
                break;    
        }
    }

    

    // Apply the filter based on the user's choice
    filteredInorderTraversal(root, choice, BookName, Author, MinPrice, MaxPrice, MinYear, MaxYear, foundMatch);

    // If no books match the filter, notify the user
    if (!foundMatch) {
        cout << "None of the books match the criteria.\n";
    }
}

int main() {
    Node* root = nullptr;  // Root of the binary search tree
    bool flag = false;  // Flag to exit the program
    int UserChoice, ISBNNumber, PublicationYear;
    string BookName, Author;
    double Price;
    Node* Found = nullptr;

    // Menu loop
    while (!flag) {
        cout << "\nLibrary System Menu:\n";
        cout << "1. Add Book\n";
        cout << "2. Search Book\n";
        cout << "3. Delete Book\n";
        cout << "4. View Book details in table format.\n";
        cout << "5. Filter Books\n";
        cout << "6. Exit\n"; 
        cout << "Enter your choice: ";
        cin >> UserChoice;

        // Switch case to handle user choices
        switch (UserChoice) {
            case 1:
                // Add a book to the system
                cout << "Enter ISBN: ";
                cin >> ISBNNumber;
                cin.ignore();
                cout << "Enter Title: ";
                getline(cin, BookName);
                cout << "Enter Author: ";
                getline(cin, Author);
                cout << "Enter Publication Year: ";
                cin >> PublicationYear;
                cout << "Enter Price: ";
                cin >> Price;
                root = AddBook(root, ISBNNumber, PublicationYear, BookName, Author, Price);
                break;

            case 2:

                if(root == nullptr){
                    cout << "No books available in the Library.\n";
                }
                else{
                // Search for a book by ISBN
                cout << "Enter ISBN Number to search the book: ";
                cin >> ISBNNumber;
                Found = SearchBook(root, ISBNNumber);
                if (Found) {
                    cout << "Book Found:\n";
                    DisplayBook(Found->book);
                } else {
                    cout << "Book with ISBN " << ISBNNumber << " not found.\n";
                }
                }
                break;

            case 3:
                if(root == nullptr){
                    cout << "No books available in the Library.\n";
                }
                else {
                // Delete a book by ISBN
                cout << "Enter ISBN Number to delete the book: ";
                cin >> ISBNNumber;
                Found = SearchBook(root, ISBNNumber);
                if (Found) {
                    root = DeleteBook(root, ISBNNumber);
                    cout << "Book with ISBN " << ISBNNumber << " has been deleted.\n";
                } else {
                    cout << "Book with ISBN " << ISBNNumber << " not found, cannot delete.\n";
                }
                }
                break;

            case 4:
                // Print all books in a tabular format
                PrintBooksInTable(root);
                break;

            case 5:
                // Filter books based on user criteria
                FilterBooks(root);
                break;    

            case 6:
                // Exit the program
                cout << "Exiting the system. Goodbye!\n";
                flag = true;  // Set the flag to true to exit the loop
                break;

            default:
                cout << "Invalid choice. Please try again.\n";
                break;
        }
    }
    return 0;
}
